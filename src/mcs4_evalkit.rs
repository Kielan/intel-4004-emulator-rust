use emu_core::*;
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub struct MCS4EvalKit {
	pub p0: u8,
	pub p1: u8,

	rom: I4001,
	ram0: I4002,
	ram1: I4002,
	cpu: I4004,
}

#[wasm_bindgen]
impl MCS4EvalKit {
	#[wasm_bindgen(constructor)]
	pub fn new() -> Self {
		MCS4EvalKit {
			p0: 0,
			p1: 0,

			rom: I4001::new([
				0xE2, 0xCF, 0x2A, 0x41, 0x50, 0xDE, 0x50, 0xE5,
				0x20, 0xFE, 0x50, 0xEE, 0x50, 0xE5, 0x50, 0xEE,
				0x50, 0xE5, 0x2A, 0x42, 0x5F, 0xFF, 0x57, 0x1A,
				0x48, 0x24, 0x5F, 0xFF, 0x53, 0x20, 0x4C, 0x18,
				0x5F, 0xFF, 0x4F, 0xFF, 0x22, 0xCB, 0xF0, 0x2B,
				0xE1, 0x21, 0xE0, 0xF2, 0x71, 0x29, 0xE4, 0xF2,
				0xE5, 0xF2, 0xE6, 0xF2, 0xE7, 0x60, 0x72, 0x29,
				0xFA, 0x50, 0xF7, 0x73, 0x39, 0x25, 0xFA, 0xF5,
				0xE1, 0x1A, 0x47, 0x1C, 0x4F, 0x19, 0x50, 0x12,
				0x50, 0x14, 0x52, 0x11, 0x43, 0x40, 0x45, 0xF0,
				0x40, 0x3F, 0x2C, 0x66, 0x2E, 0x59, 0x20, 0x00,
				0x3D, 0x21, 0x84, 0x85, 0xE0, 0xF6, 0x74, 0x59,
				0x75, 0x59, 0x50, 0xDE, 0x40, 0x75, 0x50, 0xDE,
				0x21, 0x94, 0x95, 0xE0, 0xF0, 0x74, 0x68, 0x75,
				0x68, 0xF0, 0x2B, 0xE1, 0x3F, 0xFA, 0x68, 0xA8,
				0xE0, 0xB9, 0xA9, 0xE2, 0xFB, 0xE0, 0x74, 0x75,
				0xF0, 0xF8, 0xE0, 0xFC, 0xE0, 0x74, 0x81, 0xF0,
				0xFB, 0xE0, 0xF2, 0x74, 0x88, 0xDF, 0xE0, 0xF7,
				0xE0, 0x1C, 0x8D, 0xF0, 0x2B, 0xE1, 0xDF, 0xF9,
				0xE0, 0xFA, 0xF9, 0xE0, 0xF3, 0xF6, 0xE0, 0x74,
				0x9C, 0x24, 0xC0, 0x21, 0xE9, 0x71, 0xA3, 0xEC,
				0xED, 0xEE, 0xEF, 0x60, 0x74, 0xA3, 0x20, 0x20,
				0x22, 0x30, 0x21, 0xE8, 0x61, 0x23, 0xE8, 0xE0,
				0x73, 0xB2, 0x20, 0x00, 0x20, 0x10, 0xF0, 0x2B,
				0xE1, 0x21, 0xEB, 0x61, 0x23, 0xEB, 0xE0, 0x73,
				0xC1, 0x2B, 0xEC, 0x14, 0xD7, 0xD8, 0x21, 0xE1,
				0xF0, 0x2B, 0xE4, 0x19, 0xD3, 0x40, 0x20, 0xF2,
				0xE4, 0xD2, 0x21, 0xE1, 0x40, 0x02, 0x2B, 0xAB,
				0xF1, 0xE1, 0xF5, 0xBB, 0xC0, 0x21, 0x23, 0x25,
				0x27, 0x29, 0x2B, 0x2D, 0x2F, 0xC0, 0x32, 0x34,
				0x36, 0x38, 0x3A, 0x3C, 0x3E, 0x30, 0xC0, 0xA4,
				0xF5, 0xFD, 0xB4, 0xEA, 0xC0, 0x00, 0xFF, 0x00,
			], 16, 0x0, 0xF, 0x0),
			ram0: I4002::new(false),
			ram1: I4002::new(false),
			cpu: I4004::new(),
		}
	}

	pub fn clock(&mut self) {
		for _ in 0..8 {
			self.rom.leading_clock();
			self.ram0.leading_clock();
			self.ram1.leading_clock();
			self.cpu.leading_clock();
	
			let mut data = 0;
			data |= self.rom.data;
			data |= self.ram0.data;
			data |= self.ram1.data;
			data |= self.cpu.data;
	
			self.rom.port = self.ram1.port;
			self.rom.data = data;
			self.rom.cm = self.cpu.rom;
			self.rom.cl = false;
			self.rom.sync = self.cpu.sync;
	
			self.ram0.data = data;
			self.ram0.cm = self.cpu.rom;
			self.ram0.p0 = false;
			self.ram0.sync = self.cpu.sync;
	
			self.ram1.data = data;
			self.ram1.cm = self.cpu.rom;
			self.ram1.p0 = true;
			self.ram1.sync = self.cpu.sync;
	
			self.cpu.data = data;
			self.cpu.test = self.ram0.port & 0x01 != 0;
			
			self.rom.trailing_clock();
			self.ram0.trailing_clock();
			self.ram1.trailing_clock();
			self.cpu.trailing_clock();
		}
		self.p0 = self.ram0.port;
		self.p1 = self.ram1.port;
	}
}